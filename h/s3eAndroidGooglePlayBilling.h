/*
 * (C) 2001-2012 Marmalade. All Rights Reserved.
 *
 * This document is protected by copyright, and contains information
 * proprietary to Marmalade.
 *
 * This file consists of source code released by Marmalade under
 * the terms of the accompanying End User License Agreement (EULA).
 * Please do not use this program/source code before you have read the
 * EULA and have agreed to be bound by its terms.
 */
/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */
#ifndef S3E_EXT_ANDROIDGOOGLEPLAYBILLING_H
#define S3E_EXT_ANDROIDGOOGLEPLAYBILLING_H

#include "s3eTypes.h"

/**
 * @addtogroup s3egroup
 * @{
 */

/**
 * @defgroup androidgoogleplaybillingapigroup S3E Android Google Play Billing API reference
 *
 * Provides an API for making in-app purchases through the Google Play store V3 interface.
 *
 * @supported{
 *             @platform{Android,android}
 * }
 *
 * @platnote This API is for Android only. For the equivalent in-app billing
 * API for iOS, see "S3E iOS App Store Billing".
 * @endplatnote
 *
 * For more information on the functionality provided by this API,
 * see the "S3E Android Google Play Billing Overview" section of the S3E API
 * Documentation.
 */

/**
 * @}
 * @addtogroup androidgoogleplaybillingapigroup
 * @{
 */

/**
 * Google Play Billing callbacks
 *
 * Note In Marmalade all callbacks are queued up and trigger after the next
 * s3eDeviceYield()
 *
 * Your callback needs to be of the form int32 MyCallback(void *systemData,void *userData)
 *   - systemData is data from the store and needs to be cast to the
 *     appropriate structure - see the "systemdata points to" comments below.
 *   - userData is specified when you register the callback, it is simply
 *     passed back to your callback and could be used to help the callback
 *     identify context (eg. it could be a pointer to a class you need to pass
 *     the data to)
 *
 * You register the callback using eg. s3eAndroidGooglePlayBillingRegister(S3E_ANDROIDGOOGLEPLAYBILLING_PURCHASE_CALLBACK, myPurchaseCallback, this);
 * The return value is always ignored.
 */
enum s3eAndroidGooglePlayBillingCallback
{
    /**
     * Called when a purchase attempt completes with an outcome.
     * @see s3eAndroidGooglePlayBillingRequestPurchase.
     * If the purchase was successful and was for a consumable good, you
     * *MUST* now call s3eAndroidGooglePlayBillingConsumeItem or the item will
     * not be available for purchase again.
     * systemdata points to a s3eAndroidGooglePlayBillingPurchaseResponse
     * @see s3eAndroidGooglePlayBillingPurchaseResponse
     */
    S3E_ANDROIDGOOGLEPLAYBILLING_PURCHASE_CALLBACK,

    /**
     * Called with a list of products that are available in the store.
     * @see s3eAndroidGooglePlayBillingRequestProductInformation
     * systtemdata points to a s3eAndroidGooglePlayBillingSkuResponse
     * @see s3eAndroidGooglePlayBillingSkuResponse
     */
    S3E_ANDROIDGOOGLEPLAYBILLING_LIST_PRODUCTS_CALLBACK,

    /**
     * Called with a list of products the user has previously purchased.
     * @see s3eAndroidGooglePlayBillingRestoreTransactions
     * systemdata points to a s3eAndroidGooglePlayBillingRestoreResponse
     * @see s3eAndroidGooglePlayBillingRestoreResponse
     */
    S3E_ANDROIDGOOGLEPLAYBILLING_RESTORE_CALLBACK,

    /**
     * Called with the result of a Consume request.
     * @see s3eAndroidGooglePlayBillingConsumeItem
     * systemdata points to a s3eAndroidGooglePlayBillingConsumeResponse
     * @see s3eAndroidGooglePlayBillingConsumeResponse
     */
    S3E_ANDROIDGOOGLEPLAYBILLING_CONSUME_CALLBACK,

    /**
     * The number of in-app billing callbacks. Required by S3E.
     */
    S3E_ANDROIDGOOGLEPLAYBILLING_CALLBACK_MAX
};

/**
 * The possible error codes from s3eAndroidGooglePlayBilling functions, these
 * error codes are used across all the callbacks
 */
enum s3eAndroidGooglePlayBillingResult
{
    /**
     * Success
     */
    S3E_ANDROIDGOOGLEPLAYBILLING_RESULT_OK = 0,

    /**
     * User pressed back or canceled a dialog
     */
    S3E_ANDROIDGOOGLEPLAYBILLING_RESULT_USER_CANCELED = 1,

    /**
     * This billing API version is not supported for the type requested
     */
    S3E_ANDROIDGOOGLEPLAYBILLING_RESULT_BILLING_UNAVAILABLE = 3,

    /**
     * Requested product is not available for purchase
     */
    S3E_ANDROIDGOOGLEPLAYBILLING_RESULT_ITEM_UNAVAILABLE = 4,

    /**
     * Invalid arguments provided to the API.
     * This error can also indicate that the application was not correctly
     * signed or properly set up for In-app Billing in Google Play, or does
     * not have the necessary permissions in its manifest
     */
    S3E_ANDROIDGOOGLEPLAYBILLING_RESULT_DEVELOPER_ERROR = 5,

    /**
     * Fatal error during the API action
     */
    S3E_ANDROIDGOOGLEPLAYBILLING_RESULT_ERROR = 6,

    /**
     * Failure to purchase since item is already owned - make sure you called
     * s3eAndroidGooglePlayBillingConsumeItem
     */
    S3E_ANDROIDGOOGLEPLAYBILLING_RESULT_ITEM_ALREADY_OWNED = 7,

    /**
     * Failure to consume since item is not owned
     */
    S3E_ANDROIDGOOGLEPLAYBILLING_RESULT_ITEM_NOT_OWNED = 8,

    /**
     * Set of error conditions internal to the extension
     */
    S3E_ANDROIDGOOGLEPLAYBILLING_REMOTE_EXCEPTION = -1001,

    S3E_ANDROIDGOOGLEPLAYBILLING_BAD_RESPONSE = -1002,

    /**
     * The security checks using your public certificate failed
     */
    S3E_ANDROIDGOOGLEPLAYBILLING_VERIFICATION_FAILED = -1003,

    S3E_ANDROIDGOOGLEPLAYBILLING_SEND_INTENT_FAILED = -1004,

    S3E_ANDROIDGOOGLEPLAYBILLING_USER_CANCELLED = -1005,

    S3E_ANDROIDGOOGLEPLAYBILLING_UNKNOWN_PURCHASE_RESPONSE = -1006,

    S3E_ANDROIDGOOGLEPLAYBILLING_MISSING_TOKEN = -1007,

    S3E_ANDROIDGOOGLEPLAYBILLING_UNKNOWN_ERROR = -1008,

    S3E_ANDROIDGOOGLEPLAYBILLING_SUBSCRIPTIONS_NOT_AVAILABLE = -1009,

    S3E_ANDROIDGOOGLEPLAYBILLING_INVALID_CONSUMPTION = -1010
};

/**
 * Structure detailing a purchase that has been made, used in both
 * s3eAndroidGooglePlayBillingPurchase and
 * s3eAndroidGooglePlayBillingRestoreResponse
 */
struct s3eAndroidGooglePlayBillingPurchase
{
    /**
     * A unique order identifier for the transaction. This corresponds to the
     * Google Wallet Order ID.
     */
    char* m_OrderID;

    /**
     * The application package from which the purchase originated.
     */
    char*    m_PackageID;

    /**
     * The item's product identifier. Every item has a product ID, which you
     * must specify in the application's product list on the Google Play
     * Developer Console.
     */
    char*    m_ProductId;

    /**
     * Time item was purchased. [since epoch, Jan 1st 1970]
     */
    uint64 m_PurchaseTime;

    /**
     * The purchase state of the order. Possible values are
     * 0 (purchased), 1 (canceled), or 2 (refunded).
     */
    int     m_PurchaseState;

    /**
     * A token that uniquely identifies a purchase for a given item and user pair.
     */
    char*   m_PurchaseToken;

    /**
     * A developer-specified string that contains supplemental information
     * about an order. You can specify a value for this field when you make
     * a s3eAndroidGooglePlayBillingRequestPurchase request.
     */
    char*   m_DeveloperPayload;

    /**
     * The raw JSON string sent from Google
     */
    char*   m_JSON;

    /**
     * The signature of the JSON string - this has already been checked by
     * this extension, however you may want to perform additional checks
     */
    char*   m_Signature;
};

/**
 * Structure passed to your S3E_ANDROIDGOOGLEPLAYBILLING_PURCHASE_CALLBACK
 * @see s3eAndroidGooglePlayBillingRequestPurchase
 * @par Required Header Files
 * s3eAndroidGooglePlayBilling.h
 */
struct s3eAndroidGooglePlayBillingPurchaseResponse
{
    /**
     * informational message to assist during development, may not be set,
     * also see device logs
     */
    char *m_ErrorMsg;

    /**
     * outcome of the purchase, if the result is
     * S3E_ANDROIDGOOGLEPLAYBILLING_RESULT_OK then m_PurchaseDetails below
     * will be be set
     */
    s3eAndroidGooglePlayBillingResult m_Status;

    /**
     * Details of the purchase, will be null if purchase failed
     */
    s3eAndroidGooglePlayBillingPurchase *m_PurchaseDetails;
};

/**
 * One of the available products listed in your shop, used in the
 * s3eAndroidGooglePlayBillingSkuResponse
 */
struct s3eAndroidGooglePlayBillingItemInfo
{
    /**
     * The product ID for the product.
     */
    char*   m_ProductID;

    /**
     * Value will be "inapp" for an in-app product or "subs" for subscription.
     */
    char*   m_Type;

    /**
     * Formatted price of the item, including its currency sign. The price
     * does not include tax. e.g $5.00
     */
    char*   m_Price;

    /**
     * Price in micro-units, where 1,000,000 micro-units equal one unit of the
	 * currency. For example, if price is "â‚¬7.99", price_amount_micros is "7990000".
     */
    char*   m_Price_Amount_Micros;

    /**
     * ISO 4217 currency code for price. For example, if price is specified in
	 * British pounds sterling, price_currency_code is "GBP".
     */
    char*   m_Price_Currency_Code;

    /**
     * Title of the item.
     */
    char*   m_Title;

    /**
     * Description of the product.
     */
    char*   m_Description;
};

/**
 * Structure passed to your S3E_ANDROIDGOOGLEPLAYBILLING_LIST_PRODUCTS_CALLBACK callback
 * @see s3eAndroidGooglePlayBillingRequestProductInformation
 * @par Required Header Files
 * s3eAndroidGooglePlayBilling.h
 */
struct s3eAndroidGooglePlayBillingSkuResponse
{
    /**
     * informational message to assist during development, may not be set,
     * also see device logs
     */
    char *m_ErrorMsg;

    /**
     * outcome of the purchase, if the result is
     * S3E_ANDROIDGOOGLEPLAYBILLING_RESULT_OK then the fields below will be
     * filled out
     */
    s3eAndroidGooglePlayBillingResult m_Status;

    /**
     * The number of products in the m_Products array
     */
    int m_NumProducts;

    /**
     * The array of products in this sku
     */
    s3eAndroidGooglePlayBillingItemInfo* m_Products;
};

/**
 * One of the purchased items, used in s3eAndroidGooglePlayBillingRestoreResponse
 */
struct s3eAndroidGooglePlayBillingPurchaseInfo
{
    /**
     * Name of the sku this product came from
     */
    const char* m_Sku;

    /**
     * details of the purchase made
     */
    s3eAndroidGooglePlayBillingPurchase m_PurchaseDetails;
};

/**
 * Structure passed to your S3E_ANDROIDGOOGLEPLAYBILLING_RESTORE_CALLBACK callback
 * @see 3eAndroidGooglePlayBillingRestoreTransactions
 * @par Required Header Files
 * s3eAndroidGooglePlayBilling.h
 */
struct s3eAndroidGooglePlayBillingRestoreResponse
{
    /**
     * informational message to assist during development, may not be set, also see device logs
     */
    char *m_ErrorMsg;

    /**
     * outcome of the purchase, if the result is
     * S3E_ANDROIDGOOGLEPLAYBILLING_RESULT_OK then the fields below will be
     * filled out
     */
    s3eAndroidGooglePlayBillingResult m_Status;

    /**
     * Number of purchases in the m_Purchases array
     */
    int m_NumPurchases;

    /**
     * List of purchases
     */
    s3eAndroidGooglePlayBillingPurchase* m_Purchases;
};

/**
 * Structure passed to your S3E_ANDROIDGOOGLEPLAYBILLING_CONSUME_CALLBACK callback
 * @see s3eAndroidGooglePlayBillingConsumeItem
 * @par Required Header Files
 * s3eAndroidGooglePlayBilling.h
 */

struct s3eAndroidGooglePlayBillingConsumeResponse
{
    /**
     * informational message to assist during development, may not be set,
     * also see device logs
     */
    char *m_ErrorMsg;

    /**
     * outcome of the consumption request, if the result is
     * S3E_ANDROIDGOOGLEPLAYBILLING_RESULT_OK then the consume request
     * succeeded
     */
    s3eAndroidGooglePlayBillingResult m_Status;
};
// \cond HIDDEN_DEFINES
S3E_BEGIN_C_DECL
// \endcond

/**
 * Returns S3E_TRUE if the AndroidGooglePlayBilling extension is available.
 */
s3eBool s3eAndroidGooglePlayBillingAvailable();

/**
 * Registers a callback to be called for an operating system event.
 *
 * The available callback types are listed in @ref s3eAndroidGooglePlayBillingCallback.
 * @param cbid ID of the event for which to register.
 * @param fn callback function.
 * @param userdata Value to pass to the @e userdata parameter of @e NotifyFunc.
 * @return
 *  - @ref S3E_RESULT_SUCCESS if no error occurred.
 *  - @ref S3E_RESULT_ERROR if the operation failed.\n
 *
 * @see s3eAndroidGooglePlayBillingUnRegister
 * @note For more information on the system data passed as a parameter to the callback
 * registered using this function, see the @ref s3eAndroidGooglePlayBillingCallback enum.
 */
s3eResult s3eAndroidGooglePlayBillingRegister(s3eAndroidGooglePlayBillingCallback cbid, s3eCallback fn, void* userData);

/**
 * Unregister a callback for a given event.
 * @param cbid ID of the callback to unregister.
 * @param fn Callback Function.
 * @return
 * - @ref S3E_RESULT_SUCCESS if no error occurred.
 * - @ref S3E_RESULT_ERROR if the operation failed.\n
 * @note For more information on the systemData passed as a parameter to the callback
 * registered using this function, see the s3eAndroidGooglePlayBillingCallback enum.
 * @note It is not necessary to define a return value for any registered callback.
 * @see s3eAndroidGooglePlayBillingRegister
 */
s3eResult s3eAndroidGooglePlayBillingUnRegister(s3eAndroidGooglePlayBillingCallback cbid, s3eCallback fn);

/**
 * Explicitly initialize s3eAndroidGooglePlayBilling extension.
 *
 * Use s3eAndroidGooglePlayBillingIsSupported() to check for completion as the
 * startup is asynchronous.
 *
 * @param base64PublicKey is the base64 version of your public key. Note that
 * this is the application's public key, not the developer public key that you
 * use with Marmalade. You can find the application's base64 public key in the
 * "Services & API" page for your application.
 */
void s3eAndroidGooglePlayBillingStart(const char* base64PublicKey);

/**
 * Terminate s3eAndroidGooglePlayBilling extension.
 *
 * Important, You should call this function when you're done as an open
 * service connection could degrade the performance of the device.
 */
void s3eAndroidGooglePlayBillingStop();

/**
 * Checks for the availability of in-app billing with the Google Play application.
 *
 * @return An s3eResult indicating the availability of in-app billing. Note,
 * this will return false until you call s3eAndroidGooglePlayBillingStart
 */
s3eResult s3eAndroidGooglePlayBillingIsSupported();

/**
 * Initiates the purchase of an item given a product ID
 *
 * You need to register for the S3E_ANDROIDGOOGLEPLAYBILLING_PURCHASE_CALLBACK
 * callback to determine the outcome of the purchase and award the purchase in
 * your app.
 *
 * For consumable "inApp" goods you *MUST* also call
 * s3eAndroidGooglePlayBillingConsumeItem. Until you do this the item will not
 * be available for purchase again in the store and you will get
 * S3E_ANDROIDGOOGLEPLAYBILLING_RESULT_ITEM_ALREADY_OWNED
 *
 * @note For additional security use the purchase developerPayload but make
 * sure it's unique to the purchase and not dependent on the device.
 * Associated callback S3E_ANDROIDGOOGLEPLAYBILLING_PURCHASE_CALLBACK
 *
 * @param purchaseID        [UTF-8 encoded] item ID to be purchased.
 * @param developerPayLoad  [UTF-8 encoded] additional arguments that you want
 *                          Google Play to send back along with the purchase
 *                          information [Optional]
 * @param inApp             You can set up either "in app" type purchases or
 *                          "subscription" based purchases. in app type
 *                          purchases are consumable, subscription type purchases are not.
 *
 * @return void - the purchase query is asynchronous, use the callback to
 * receive the response.
 */
void s3eAndroidGooglePlayBillingRequestPurchase(const char* productID, bool inApp, const char* developerPayLoad S3E_DEFAULT(0));

/**
 * Returns details about items available for purchase.
 *
 * Unfortunately it is not possible to blindly enumerate available items so
 * you need to pass two lists of known product IDs, one for "inApp" items and
 * one for "subscription" items, either list could be empty (or null).
 *
 * You need to register for the
 * S3E_ANDROIDGOOGLEPLAYBILLING_LIST_PRODUCTS_CALLBACK to receive the
 * response.
 *
 * @param inAppProducts         an array of your const char* "inApp" product Ids (skus).
 * @param numInAppProducts      the number of product Ids in the "inApp" array.
 * @param subProducts           an array of your const char* "Subscription" product Ids (skus).
 * @param numSubProducts        the number of product Ids in the "Subscription" array.
 *
 * @return void - the request is asynchronous, use the callback to receive the response.
 */
void s3eAndroidGooglePlayBillingRequestProductInformation(const char** inAppProducts,int numInAppProducts, const char** subProducts, int numSubProducts);

/**
 * Query for purchased items.
 *
 * This method returns the current un-consumed products owned by the user.
 *
 * You need to register for the S3E_ANDROIDGOOGLEPLAYBILLING_RESTORE_CALLBACK
 * to receive the response
 *
 * The Google Play service returns only the purchases made by the user account
 * that is currently logged in to the device.
 *
 * @return void - the query is asynchronous, use the callback to receive the response.
 */
void s3eAndroidGooglePlayBillingRestoreTransactions();

/**
 * Consumes the purchase of the given "in app" (consumable) item such as coins.
 *
 * Note, this consumes the entire purchase, the Store is not responsible for
 * tracking the individual coins.
 *
 * Important, Until you call this function the item will not be available for
 * purchase in the store again.
 *
 * Google recommend your flow is to Consume the item and check the Consume
 * callback response before awarding the goods to the user.
 *
 * It is also good practice to invoke 3eAndroidGooglePlayBillingRestoreTransactions
 * at discrete points in your app and check for consumable items that you may have missed.
 *
 * Associated callback S3E_ANDROIDGOOGLEPLAYBILLING_CONSUME_CALLBACK.
 *
 * @param purchaseToken     The m_PurchaseToken of the order you are consuming.
 *
 * @return void - the request is asynchronous, use the callback to receive the response.
 */
void s3eAndroidGooglePlayBillingConsumeItem(const char* purchaseToken);

S3E_END_C_DECL

/** @} */

#endif /* !S3E_EXT_ANDROIDGOOGLEPLAYBILLING_H */
